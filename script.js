(function () {
  'use strict';

  window.addEventListener('DOMContentLoaded', function () {

    $("#go-tuto").click(function(){
      $("#tutoriel").animate({opacity: "0"});
      setTimeout(() => {
        $("#tutoriel").css({display: "none"});      
      }, 500);
    });
    
    $("#accueil").click(function(){
      $("#canvas").css("display", "inline-block");
      $("object").css("display", "none");
      $("#formulaire-contact").css("display", "none");
    });
    
    $("#cv").click(function(){
      $("#canvas").css("display", "none");
      $("object").css("display", "inline-block");
      $("#formulaire-contact").css("display", "none");
    });
    
    $("#contact").click(function(){
      $("#canvas").css("display", "none");
      $("object").css("display", "none");
      $("#formulaire-contact").css("display", "inline-block");
    });

    ///////////////////////////////////////////////////////////////
    /////               INITIALISATION DU CANVAS              /////
    ///////////////////////////////////////////////////////////////

    var canvas = document.getElementById("canvas");
    canvas.width = 900;
    canvas.height = 480;
    var ctx = canvas.getContext("2d");
    ctx.font = "14px VT323";
    ctx.imageSmoothingEnabled = false;
    ctx.msImageSmoothingEnabled = false;
    ctx.mozImageSmoothingEnabled = false;
    ctx.webkitImageSmoothingEnabled = false;

    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

    ///////////////////////////////////////////////////////////////
    /////                        CONTROLS                     /////
    ///////////////////////////////////////////////////////////////

    var controls = {

      gauche: false,
      droite: false,
      haut: false,
      bas: false,
      hit: false,
      revive: false,
      
      /////////////////////////////////////////
      // CODE SECRET
      // tu devrais pas regarder ça je t'assure
      // just leet it go
      
      m4p: false,
      t48134UV3r1F: [],
      c0D353Cr37Fr: [90, 90, 83, 83, 81, 68, 81, 68, 66, 65],
      c0D353Cr37FrF13CH35: [38, 38, 40, 40, 37, 39, 37, 39, 66, 81],
      c0D353Cr37En: [87, 87, 83, 83, 65, 68, 65, 68, 66, 65],
      c0D353Cr37EnF13CH35: [38, 38, 40, 40, 37, 39, 37, 39, 66, 65],
      c0D353Cr374C71F: false,
      
      /////////////////////////////////////////

      keyUpOrDown: function (event) {

        // CHECK SI KEYDOWN OU KEYUP
        var defKey = (event.type == 'keydown') ? true : false;

        switch (event.keyCode) {

          case 37: // fleche gauche
          case 81: // A FR
          case 65: // A QWERTY
            controls.gauche = defKey;
            break;
          case 38: // fleche haute
          case 90: // Z FR
          case 87: // W QWERTY
            controls.haut = defKey;
            break;
          case 39: // fleche droite
          case 68: // D
            controls.droite = defKey;
            break;
          case 83: // S
          case 40: // fleche bas
            controls.bas = defKey;
            break;
          case 13: // ENTREE
            controls.hit = defKey;
            break;
          case 32: // ESPACE
            controls.revive = defKey;
            break;
          case 76: // L // SECRET
            controls.m4p = defKey;
            break;
        }

        ////////////////////////////////////////////////
        // CODE SECRET
        // tu devrais pas regarder ça non plus, vraiment
        // leet it go too

        if (defKey && !controls.c0D353Cr374C71F) {
          controls.t48134UV3r1F.push(event.keyCode);
          if (controls.t48134UV3r1F.length > 10) {
            controls.t48134UV3r1F.splice(0, 1);
          }
        }

        if (!controls.c0D353Cr374C71F) {
          if (controls.t48134UV3r1F.toString() === controls.c0D353Cr37Fr.toString() ||
            controls.t48134UV3r1F.toString() === controls.c0D353Cr37FrF13CH35.toString() ||
            controls.t48134UV3r1F.toString() === controls.c0D353Cr37En.toString() ||
            controls.t48134UV3r1F.toString() === controls.c0D353Cr37EnF13CH35.toString()) {
            controls.c0D353Cr374C71F = true;
            console.log('Tu connais tes classiques!!! It\'s dangerous to go alone. Take collide map, vectors and hitboxes!!! Keep L pressed!!!');
          }
        }

        ////////////////////////////////////////////////
        // tu peux reprendre une activité normale

      },
      direction: '',
      checkDirection: function () {
        // NE PAS MODIFIER L'ORDRE DE VERIFICATION
        if (this.droite && this.haut) {
          return this.direction = 'hautDroite';
        }
        if (this.gauche && this.haut) {
          return this.direction = 'hautGauche';
        }

        if (this.droite) {
          return this.direction = 'droite';
        }
        if (this.gauche) {
          return this.direction = 'gauche';
        }
        if (this.haut) {
          return this.direction = 'haut';
        }
        if (this.bas) {
          return this.direction = 'bas';
        }
        if (!this.gauche && !this.haut && !this.droite && !this.bas) {
          return this.direction = 'idle';
        }
      }
    };

    ///////////////////////////////////////////////////////////////
    /////                         CAMERA                      /////
    ///////////////////////////////////////////////////////////////

    var camera = {
      x: 0, // 0 position initiale // -7700 pour clairiere de fin
      y: 0,
      width: canvas.width,
      height: canvas.height,
    }

    camera.update_x = function (valeurX) {
      return this.x = valeurX;
    }; // Mise a jour de la position x de la caméra
    // Les éléments fixes se servent du x camera pour modifier leurs positions

    ///////////////////////////////////////////////////////////////
    /////                        DECOR                        /////
    ///////////////////////////////////////////////////////////////

    // fonction usine pour toutes les images.
    var elementImage = (function () {

      var ConstructeurElementImage = function (width, height, x, y, x_velocite) {
        this.contenu = new Image(width, height); // width || 900 et height || 506?
        this.x = x || 0;
        this.y = y || 0;
        this.x_velocite = x_velocite || 0;
        this.variation = null;
      };

      return function (width, height, x, y, x_velocite) {
        return new ConstructeurElementImage(width, height, x, y, x_velocite);
      };

    }());

    // Déclarations des image pour le BG PARALLAX
    var bgNuagesFond = elementImage(900, 506, -400, 0, 0);
    bgNuagesFond.contenu.src = "img/clouds_BG.png";

    var bgMontagnes = elementImage(900, 506, 0, 0, 0);
    bgMontagnes.contenu.src = "img/mountains.png";

    var bgNuageSeul = elementImage(900, 506, 700, 0, 0);
    bgNuageSeul.contenu.src = "img/cloud_lonely.png";

    var bgNuageAvantMontagne = elementImage(900, 506, 0, 0, 0);
    bgNuageAvantMontagne.contenu.src = "img/clouds_MG_3.png";

    var bgSolArrierePlan = elementImage(900, 506, 0, 0, 0);
    bgSolArrierePlan.contenu.src = "img/sol_sup.png";

    var bgNuagesSecondPlan = elementImage(900, 506, -400, 0, 0);
    bgNuagesSecondPlan.contenu.src = "img/clouds_MG_2.png";

    var bgForet = elementImage(900, 506, 0, 0, 0);
    bgForet.contenu.src = "img/forest2.png";

    var bgNuagesPremierPlan = elementImage(900, 506, -400, 0, 0);
    bgNuagesPremierPlan.contenu.src = "img/clouds_MG_1_lightened.png";

    var bgMontagnesDouble = elementImage(900, 506, 0, 0, 0);
    bgMontagnesDouble.contenu.src = "img/mountains.png";

    // Déclaration du sprite pour les arbre du décor
    var arbres = elementImage(750, 256, 0, 0, 0);
    arbres.contenu.src = "img/arbres.png";

    // ANIMATIONS OBJETS

    // FEU DE CAMP
    var feu = elementImage(768, 128, 0, 0, 0);
    feu.contenu.src = "img/feu.png";

    var interpolationsFeu = {
      static: [
        [0, 0, 128, 128],
        [128, 0, 128, 128],
        [256, 0, 128, 128],
        [384, 0, 128, 128],
        [512, 0, 128, 128],
        [640, 0, 128, 128]
      ]
    };

    var objetFeu = {
      x: 50,
      y: 315
    };

    var timestampTemoinFeu;
    var indexSpriteObjets = 0;

    function animationFeu(timestamp, nomPersonnage, nomSprite, nomInterpolation, mouvementInterpolation, decalageX, decalageY, vitesse, echelle) {

      if (indexSpriteObjets > nomInterpolation[mouvementInterpolation].length - 1) {
        indexSpriteObjets = 0;
      }

      if (!timestampTemoinFeu) {
        timestampTemoinFeu = timestamp;
      } // definit un TS de base si absent

      if (timestamp - timestampTemoinFeu > vitesse) {
        timestampTemoinFeu = timestamp;
        if (indexSpriteObjets < nomInterpolation[mouvementInterpolation].length - 1) {
          indexSpriteObjets++;
        } else {
          indexSpriteObjets = 0;
        }
      } // fait defiler les sprites pour chaque anim

      ctx.drawImage(nomSprite.contenu, nomInterpolation[mouvementInterpolation][indexSpriteObjets][0], nomInterpolation[mouvementInterpolation][indexSpriteObjets][1], nomInterpolation[mouvementInterpolation][indexSpriteObjets][2], nomInterpolation[mouvementInterpolation][indexSpriteObjets][3], nomPersonnage.x + camera.x - decalageX, nomPersonnage.y - decalageY, nomInterpolation[mouvementInterpolation][indexSpriteObjets][2] * echelle, nomInterpolation[mouvementInterpolation][indexSpriteObjets][3] * echelle);
      // le decalage x et y sert a recentrer le sprite sur la hitbox de l'objet
    };

    
    // COFFRE

    var coffre = elementImage(1360, 390, 0, 0, 0);
    coffre.contenu.src = "img/chest.png";

    var interpolationsCoffre = {
      static: [
        [0, 390, 272, 195], // plusieurs occurences de la frame initiale pour avoir l'impression d'une pause entre les 2 anims
        [0, 390, 272, 195],
        [0, 390, 272, 195],
        [0, 390, 272, 195],
        [0, 390, 272, 195],
        [0, 390, 272, 195],
        [0, 390, 272, 195],
        [272, 390, 272, 195],
        [544, 390, 272, 195],
        [816, 390, 272, 195],
        [1088, 390, 272, 195],
        [0, 585, 272, 195],
        [272, 585, 272, 195],
        [544, 585, 272, 195],
        [816, 585, 272, 195],
        [1088, 585, 272, 195],
        [0, 780, 272, 195],
        [272, 780, 272, 195],
        [544, 780, 272, 195],
        [816, 780, 272, 195],
        [1088, 780, 272, 195]
      ],
      opening: [
        [0, 0, 272, 195],
        [272, 0, 272, 195],
        [544, 0, 272, 195],
        [816, 0, 272, 195],
        [1088, 0, 272, 195],
        [0, 195, 272, 195],
        [272, 195, 272, 195],
        [544, 195, 272, 195],
        [816, 195, 272, 195],
        [1088, 195, 272, 195]
      ]
    };

    var objetCoffre = {
      x: 8255,
      y: 308,
      w: 272, // ecart de 16px a gauche et a droite pour la collision
      h: 195, // ecart de 33px en haut pour la collision
      unlock: false // triggered dans la fonction de detection de collision avec les potions
    }

    var timestampTemoinCoffre;
    var indexSpriteCoffre = 0;

    function animationCoffre(timestamp, nomPersonnage, nomSprite, nomInterpolation, mouvementInterpolation, decalageX, decalageY, vitesse, echelle) {

      if (indexSpriteCoffre > nomInterpolation[mouvementInterpolation].length - 1) {
        indexSpriteCoffre = 0;
      }

      if (!timestampTemoinCoffre) {
        timestampTemoinCoffre = timestamp;
      } // definit un TS de base si absent

      if (timestamp - timestampTemoinCoffre > vitesse) {
        timestampTemoinCoffre = timestamp;
        if (indexSpriteCoffre < nomInterpolation[mouvementInterpolation].length - 1) {
          indexSpriteCoffre++;
        } else {
          if (objetCoffre.unlock){
            objetCv.unlock = true;
          } else {
            indexSpriteCoffre = 0;
          }

        }
      } // fait defiler les sprites pour chaque anim

      ctx.drawImage(nomSprite.contenu, nomInterpolation[mouvementInterpolation][indexSpriteCoffre][0], nomInterpolation[mouvementInterpolation][indexSpriteCoffre][1], nomInterpolation[mouvementInterpolation][indexSpriteCoffre][2], nomInterpolation[mouvementInterpolation][indexSpriteCoffre][3], nomPersonnage.x + camera.x - decalageX, nomPersonnage.y - decalageY, nomInterpolation[mouvementInterpolation][indexSpriteCoffre][2] * echelle, nomInterpolation[mouvementInterpolation][indexSpriteCoffre][3] * echelle);
      // le decalage x et y sert a recentrer le sprite sur la hitbox de l'objet
    };

    // SCROLL/CV

    var holyCv = elementImage(60, 72, 0, 0, 0);
    holyCv.contenu.src = "img/holy_cv.png";

    var objetCv = {
      x: 8280,
      y: 200,
      w: 60, // ecart de 16px a gauche et a droite pour la collision
      h: 72, // ecart de 33px en haut pour la collision
      unlock: false // triggered dans la fonction d'animation du coffre ouvert
    }


    ///////////////////////////////////////////////////////////////
    /////                      TILE MAPS                      /////
    ///////////////////////////////////////////////////////////////

    // Fonction usine pour la création des couches de la tile map
    var map = (function () {

      var NouvelleMap = function (cols, rows, tsize, tiles) {
        this.cols = cols || 270; // nombres de colonne de la map
        this.rows = rows || 15; // nombres de ligne de la map
        this.tsize = tsize || 32; // taille en px des tiles du tileset
        this.tiles = tiles; // proprietes tiles pour récuperer le numéro des la tile
      };

      NouvelleMap.prototype.getTile = function (col, row, nomMap) {
        return this.tiles[row * nomMap.cols + col] // récupere le numéro de la tile pour chaque index de la tile map
      };

      return function (cols, rows, tsize, tiles) {
        return new NouvelleMap(cols, rows, tsize, tiles);
      }

    }());

    // Déclaration de l'image pour la tile map
    var tileSet = new Image(320, 192);
    tileSet.src = "img/tileSet.png";

    ////////////////////////////
    // declarations des terrains
    // 1 var terrain map pour le tableau contenant la tile map
    // 1 var contenant l'exécution de la fonction usine (cols, rows, tsize, tiles)

    var terrainArrierePlanMap = [
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 31, 45, 44, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 33, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 42, 44, 32, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 33, 31, 45, 43, 0, 0, 0, 0, 0, 0, 51, 52, 54, 45, 42, 34, 52, 35, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 44, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 45, 44, 45, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 51, 52, 35, 44, 32, 45, 44, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 42, 42, 42, 44, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 32, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 34, 54, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 42, 44, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 42, 44, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 45, 42, 42, 42, 42, 34, 35, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 42, 42, 42, 42, 44, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 34, 35, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 32, 45, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 44, 45, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 42, 42, 42, 42, 42, 42, 44, 33, 0, 0, 0, 0, 0, 0, 31, 45, 42, 42, 42, 42, 42, 44, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 42, 42, 44, 45, 42, 42, 42, 42, 42, 42, 42, 42, 42, 44, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 52, 35, 42, 42, 42, 42, 42, 42, 42, 44, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 44, 45, 34, 52, 52, 35, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 42, 44, 32, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 42, 42, 44, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 32, 45, 42, 42, 42, 42, 42, 42, 43, 0, 0, 0, 0, 0, 0, 51, 52, 35, 42, 42, 42, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 52, 35, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 42, 44, 33, 0, 41, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 0, 0, 0, 42, 42, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 55, 42, 42, 42, 42, 42, 42, 42, 42, 44, 33, 0, 0, 0, 0, 0, 0, 0, 51, 52, 35, 34, 52, 52, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 34, 54, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 0, 0, 0, 0, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 0, 0, 0, 0, 42, 44, 32, 45, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 53, 52, 52, 53, 0, 0, 0, 0, 0, 31, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 44, 45, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 32, 45, 44, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 55, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 32, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 35, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 45, 42, 44, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 32, 45, 42, 42, 42, 42, 44, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ];
    var terrainArrierePlan = map(null, null, null, terrainArrierePlanMap);

    var terrainPremierPlanMap = [

    ];
    var terrainPremierPlan = map(null, null, null, terrainPremierPlanMap);

    var terrainHerbeMap = [
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 29, 30, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 18, 20, 0, 0, 56, 57, 58, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 30, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 28, 29, 30, 18, 0, 20, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 18, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 27, 28, 28, 29, 30, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 27, 28, 29, 28, 29, 30, 17, 0, 0, 0, 0, 27, 28, 30, 0, 0, 0, 27, 28, 28, 29, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 27, 28, 28, 29, 30, 0, 0, 27, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 20, 56, 57, 58, 17, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 27, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 27, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 27, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 27, 28, 29, 28, 29, 28, 29, 28, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 27, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 27, 28, 29, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 0, 20, 56, 57, 58, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 17, 18, 18, 18, 18, 18, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 30, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 30, 0, 0, 0, 0, 0, 0, 17, 18, 0, 20, 0, 0, 20, 0, 17, 0, 0, 0, 0, 0, 17, 18, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 57, 58, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 30, 0, 20, 0, 0, 0, 0, 27, 28, 29, 28, 30, 20, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 20, 0, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 17, 18, 20, 0, 0, 0, 0, 0, 0, 27, 28, 30, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 27, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 30, 17, 0, 0, 0, 0, 0, 0, 27, 28, 29, 28, 29, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 20, 0, 0, 0, 0, 17, 0, 0, 17, 18, 20, 20, 0, 0, 0, 0, 20, 0, 17, 0, 0, 0, 0, 0, 0, 0, 18, 18, 27, 28, 30, 0, 0, 0, 0, 0, 27, 28, 30, 56, 57, 58, 0, 20, 0, 0, 17, 18, 18, 18, 0, 27, 28, 29, 30, 0, 17, 18, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 30, 0, 0, 0, 17, 0, 0, 0, 0, 27, 30, 0, 0, 0, 0, 0, 27, 28, 29, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 0, 27, 28, 30, 18, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 27, 28, 29, 28, 29, 28, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 17, 18, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 58, 27, 28, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 20, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 28, 29, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 0, 0, 0, 0, 0, 27, 28, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 30, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 17, 0, 0, 0, 18, 0, 20, 0, 17, 0, 0, 20, 0, 56, 57, 58, 18, 0, 20, 0, 27, 28, 30, 0, 0, 0, 0, 27, 28, 29, 30, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 27, 28, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 28, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 30, 0, 0, 27, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 28, 29, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ];
    var terrainHerbe = map(null, null, null, terrainHerbeMap);

    var terrainPontsMap = [

    ];
    var terrainPonts = map(null, null, null, terrainPontsMap);

    ////////////////////////////
    // fonction recuperation des positions de tiles. fonction appelée au requestAnimationFrame
    var drawMap = function (nomMap) {
      for (var c = 0; c < nomMap.cols; c++) { // pour chaque colonne de la tilemap
        for (var r = 0; r < nomMap.rows; r++) { // pour chaque ligne de la tilemap
          var tile = nomMap.getTile(c, r, nomMap); // récupere le numéro de la tilemap
          if (tile !== 0 && tile <= 10) { // 0 => case vide
            ctx.drawImage(
              tileSet, // image
              (tile - 1) * nomMap.tsize, // source x
              0, // source y
              nomMap.tsize, // source width
              nomMap.tsize, // source height
              c * nomMap.tsize + camera.x, // target x
              r * nomMap.tsize, // target y
              nomMap.tsize, // target width
              nomMap.tsize // target height
            );
          }
          if (tile !== 0 && tile > 10 && tile <= 20) { // 0 => case vide
            ctx.drawImage(
              tileSet, // image
              (tile - 11) * nomMap.tsize, // source x
              nomMap.tsize, // source y
              nomMap.tsize, // source width
              nomMap.tsize, // source height
              c * nomMap.tsize + camera.x, // target x
              r * nomMap.tsize, // target y
              nomMap.tsize, // target width
              nomMap.tsize // target height
            );
          }
          if (tile !== 0 && tile > 20 && tile <= 30) { // 0 => case vide
            ctx.drawImage(
              tileSet, // image
              (tile - 21) * nomMap.tsize, // source x
              nomMap.tsize * 2, // source y
              nomMap.tsize, // source width
              nomMap.tsize, // source height
              c * nomMap.tsize + camera.x, // target x
              r * nomMap.tsize, // target y
              nomMap.tsize, // target width
              nomMap.tsize // target height
            )
          }
          if (tile !== 0 && tile > 30 && tile <= 40) { // 0 => case vide
            ctx.drawImage(
              tileSet, // image
              (tile - 31) * nomMap.tsize, // source x
              nomMap.tsize * 3, // source y
              nomMap.tsize, // source width
              nomMap.tsize, // source height
              c * nomMap.tsize + camera.x, // target x
              r * nomMap.tsize, // target y
              nomMap.tsize, // target width
              nomMap.tsize // target height
            );
          }
          if (tile !== 0 && tile > 40 && tile <= 50) { // 0 => case vide
            ctx.drawImage(
              tileSet, // image
              (tile - 41) * nomMap.tsize, // source x
              nomMap.tsize * 4, // source y
              nomMap.tsize, // source width
              nomMap.tsize, // source height
              c * nomMap.tsize + camera.x, // target x
              r * nomMap.tsize, // target y
              nomMap.tsize, // target width
              nomMap.tsize // target height
            );
          }
          if (tile !== 0 && tile > 50 && tile <= 60) { // 0 => case vide
            ctx.drawImage(
              tileSet, // image
              (tile - 51) * nomMap.tsize, // source x
              nomMap.tsize * 5, // source y
              nomMap.tsize, // source width
              nomMap.tsize, // source height
              c * nomMap.tsize + camera.x, // target x
              r * nomMap.tsize, // target y
              nomMap.tsize, // target width
              nomMap.tsize // target height
            );
          }

        }
      }
    }

    ///////////////////////////////////////////////////////////////
    /////                  COLLISIONS TERRAIN                 /////
    ///////////////////////////////////////////////////////////////

    // GRILLE LOGIQUE

    var terrainCollisionsMap = [
      13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 0, 0, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 22, 22, 0, 0, 0, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 22, 22, 22, 22, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 32, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 22, 22, 0, 0, 22, 22, 22, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 1, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 11, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 13, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 11, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ];
    var terrainCollision = map(null, null, null, terrainCollisionsMap);

    // CHECK COLLISIONS DAVE VS TERRAIN

    var x_collision;
    var y_collision;
    var collision;

    var checkCollisions = function (nomMap) {
      // balayage de la map de collision
      for (var c = 0; c < nomMap.cols; c++) {
        for (var r = 0; r < nomMap.rows; r++) {
          var tile = nomMap.getTile(c, r, nomMap); // recuperation du numero de la tile

          // comparaison entre dave et la tile surveillee pour verif si il y a collision
          x_collision = (dave.x < ((c * nomMap.tsize) + camera.x + nomMap.tsize) && ((dave.x + dave.largeur) > (c * nomMap.tsize) + camera.x));
          y_collision = (dave.y < (r * nomMap.tsize + nomMap.tsize)) && (dave.y + dave.hauteur > r * nomMap.tsize);
          collision = x_collision && y_collision;

          // si collision true
          if (collision) {

            // résolution de la collision pour déterminer sur quel cote de la tile la collision a eu lieu

            var centre_tile_x = ((c * nomMap.tsize) + (nomMap.tsize / 2) - camera.width + camera.delta_x);
            var centre_tile_y = (r * nomMap.tsize) + (nomMap.tsize / 2);
            var centre_dave_x = dave.x + (dave.largeur / 2);
            var centre_dave_y = dave.y + (dave.hauteur / 2);

            var vecteur_x = centre_dave_x - centre_tile_x;
            var vecteur_y = centre_dave_y - centre_tile_y;

            // CONTROLE DES VECTEURS // SECRET
            if (controls.map && controls.c0D353Cr374C71F) {
              // centre de dave
              ctx.fillStyle = 'rgba(255, 0, 0, 1)';
              ctx.beginPath();
              ctx.rect(centre_tile_x, centre_tile_y, 4, 4);
              ctx.fill();
              // centre de la tile checkée
              ctx.fillStyle = 'rgba(0, 0, 255, 1)';
              ctx.beginPath();
              ctx.rect(centre_dave_x, centre_dave_y, 4, 4);
              ctx.fill();
              // ligne entre le centre de Dave et le centre de la tile checkée
              ctx.beginPath();
              ctx.lineWidth = "2";
              ctx.strokeStyle = "green";
              ctx.moveTo(centre_dave_x, centre_dave_y);
              ctx.lineTo(centre_tile_x, centre_tile_y);
              ctx.stroke();
            };

            // REPONSES AUX COLLISIONS

            switch (tile) {
              case 2: // SOL
                if (vecteur_y < 0) {
                  if (controls.direction === 'haut' || controls.direction === 'hautGauche' || controls.direction === 'hautDroite') {
                    dave.y_velocite = -30;
                    dave.saut = true;
                  } else {
                    dave.y = (r * nomMap.tsize) - dave.hauteur;
                    dave.saut = false;
                    dave.y_velocite = 0;
                  }
                }
                break;
              case 13: // MUR GAUCHE
                dave.x = (c * nomMap.tsize + nomMap.tsize + camera.x);
                break;
              case 11: // MUR DROITE
                dave.x = (c * nomMap.tsize - dave.largeur + camera.x);
                break;
              case 22: // PLATEFORME
                if (controls.direction === 'bas') {
                  // la touche BAS annule la réponse à la collision pour descendre de plateforme
                } else {
                  if (vecteur_y < 0) {
                    if (controls.direction === 'haut' || controls.direction === 'hautGauche' || controls.direction === 'hautDroite') {
                      dave.y_velocite = -30;
                      dave.saut = true;
                    } else {
                      dave.y = (r * nomMap.tsize) - dave.hauteur;
                      dave.saut = false;
                      dave.y_velocite = 0;
                    }
                  } else {
                    dave.y = (r * nomMap.tsize) + nomMap.tsize;
                    dave.y_velocite = 0;
                  }
                }
                break;
              case 1: // BORD GAUCHE
                if (vecteur_x < 0 && vecteur_y < 0) {
                  if ((dave.x + 32) > (centre_tile_x - 16)) {
                    if (controls.direction === 'haut' || controls.direction === 'hautGauche' || controls.direction === 'hautDroite') {
                      dave.y_velocite = -30;
                      dave.saut = true;
                    } else {
                      dave.y = (r * nomMap.tsize) - dave.hauteur;
                      dave.saut = false;
                      dave.y_velocite = 0;
                    }
                  }
                }
                break;
              case 3: // BORD DROITE
                if (vecteur_x > 0 && vecteur_y < 0) {
                  if (dave.x <= (centre_tile_x /*+ 8*/ )) {
                    if (controls.direction === 'haut' || controls.direction === 'hautGauche' || controls.direction === 'hautDroite') {
                      dave.y_velocite = -30;
                      dave.saut = true;
                    } else {
                      dave.y = (r * nomMap.tsize) - dave.hauteur;
                      dave.saut = false;
                      dave.y_velocite = 0;
                    }
                  }
                }
                break;
              case 31: // BORD GAUCHE BAS
                if (vecteur_x < 0 && (vecteur_y + 32) < 0) {
                  if ((dave.x + 32) > (centre_tile_x - 16)) {
                    if (controls.direction === 'haut' || controls.direction === 'hautGauche' || controls.direction === 'hautDroite') {
                      dave.y_velocite = -30;
                      dave.saut = true;
                    } else {
                      dave.y = (r * nomMap.tsize) - dave.hauteur;
                      dave.saut = false;
                      dave.y_velocite = 0;
                    }
                  }
                }
                break;
              case 32: // SOL BAS
                if (controls.direction === 'bas') {
                  // la touche BAS annule la réponse à la collision pour descendre de plateforme
                } else {
                  if (vecteur_y + 26 < 0) {
                    if (controls.direction === 'haut' || controls.direction === 'hautGauche' || controls.direction === 'hautDroite') {
                      dave.y_velocite = -30;
                      dave.saut = true;
                    } else {
                      dave.y = (r * nomMap.tsize) - dave.hauteur;
                      dave.saut = false;
                      dave.y_velocite = 0;
                    }
                  }
                }
                break;
              case 33: // BORD DROITE BAS
                if (vecteur_x > 0 && vecteur_y + 26 < 0) {
                  if (dave.x <= (centre_tile_x /*+ 8*/ )) {
                    if (controls.direction === 'haut' || controls.direction === 'hautGauche' || controls.direction === 'hautDroite') {
                      dave.y_velocite = -30;
                      dave.saut = true;
                    } else {
                      dave.y = (r * nomMap.tsize) - dave.hauteur;
                      dave.saut = false;
                      dave.y_velocite = 0;
                    }
                  }
                }
                break;
              case 0:
                // pas de réponse à la collision. Case vide
                break;
            }
          }
        }
      }
    }

    // SECRET 

    var drawMapCollision = function (nomMap) {

      // fonction de dessin de la tile 
      var drawTile = function () {
        ctx.fillRect(
          c * nomMap.tsize + camera.x, // target x
          r * nomMap.tsize, // target y
          nomMap.tsize, // target width
          nomMap.tsize); // target height
      };

      for (var c = 0; c < nomMap.cols; c++) {
        for (var r = 0; r < nomMap.rows; r++) {
          var tile = nomMap.getTile(c, r, nomMap);
          if (tile > 0) { // 0 => case vide

            switch (tile) {
              case 1: // bord gauche haut
                ctx.fillStyle = 'rgba(255, 0, 0, 1)';
                drawTile();
                break;
              case 2: // sol
                ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
                drawTile();
                break;
              case 3: // bord haut droite
                ctx.fillStyle = 'rgba(0, 0, 255, 0.5)';
                drawTile();
                break;
              case 11: // mur droite
                ctx.fillStyle = 'rgba(255, 0, 255, 0.5)';
                drawTile();
                break;
              case 13: // mur gauche
                ctx.fillStyle = 'rgba(200, 125, 12, 0.5)';
                drawTile();
                break;
              case 22: // plateforme (collision top & bottom / traversable) 
                ctx.fillStyle = 'rgba(50, 125, 200, 0.5)';
                drawTile();
                break;
              case 31: // bord bas gauche
                ctx.fillStyle = 'rgba(200, 125, 12, 0.5)';
                drawTile();
                break;
              case 32: // sol bas
                ctx.fillStyle = 'rgba(20, 50, 30, 0.5)';
                drawTile();
                break;
              case 33: // bord bas droite
                ctx.fillStyle = 'rgba(20, 100, 30, 0.5)';
                drawTile();
                break;
              case 0:
                break;

            }
          }
        }
      }
    } // juste la représentation visuelle de la collision map

    ///////////////////////////////////////////////////////////////
    /////                        DAVE                         /////
    ///////////////////////////////////////////////////////////////

    // SPRITE SHEET DAVE

    var spriteDave = elementImage(1200, 1332, 0, 0, 0);
    spriteDave.contenu.src = "img/dave.png";

    // POSITIONS DES SPRITES

    var interpolationDave = {
      runDroite: [
        [0, 111, 150, 111],
        [150, 111, 150, 111],
        [300, 111, 150, 111],
        [450, 111, 150, 111],
        [600, 111, 150, 111],
        [750, 111, 150, 111]
      ],
      runGauche: [
        [1050, 1443, 150, 111],
        [900, 1443, 150, 111],
        [750, 1443, 150, 111],
        [600, 1443, 150, 111],
        [450, 1443, 150, 111],
        [300, 1443, 150, 111]
      ],
      idleDroite: [
        [900, 444, 150, 111],
        [1050, 444, 150, 111],
        [0, 555, 150, 111],
        [150, 555, 150, 111]
      ],
      idleGauche: [
        [150, 1776, 150, 111],
        [0, 1776, 150, 111],
        [1050, 1887, 150, 111],
        [900, 1887, 150, 111]
      ],
      jumpDroite: [
        [0, 222, 150, 111],
        [150, 222, 150, 111],
        [300, 222, 150, 111],
        [450, 222, 150, 111],
        [600, 222, 150, 111],
        [750, 222, 150, 111]
      ],
      jumpGauche: [
        [1050, 1554, 150, 111],
        [900, 1554, 150, 111],
        [750, 1554, 150, 111],
        [600, 1554, 150, 111],
        [450, 1554, 150, 111],
        [300, 1554, 150, 111]
      ],
      crouchDroite: [
        [600, 0, 150, 111],
        [750, 0, 150, 111],
        [900, 0, 150, 111],
        [1050, 0, 150, 111]
      ],
      crouchGauche: [
        [450, 1332, 150, 111],
        [300, 1332, 150, 111],
        [150, 1332, 150, 111],
        [0, 1332, 150, 111]
      ],
      hitDroite: [
        [0, 666, 150, 111],
        [150, 666, 150, 111],
        [300, 666, 150, 111],
        [450, 666, 150, 111],
        [600, 666, 150, 111]
      ],
      hitGauche: [
        [1050, 1998, 150, 111],
        [900, 1998, 150, 111],
        [750, 1998, 150, 111],
        [600, 1998, 150, 111],
        [450, 1998, 150, 111]
      ],
      dieDroite: [
        [900, 777, 150, 111],
        [1050, 777, 150, 111],
        [0, 888, 150, 111],
        [150, 888, 150, 111],
        [300, 888, 150, 111],
        [450, 888, 150, 111]
      ],
      dieGauche: [
        [0, 2109, 150, 111],
        [150, 2109, 150, 111],
        [1050, 2220, 150, 111],
        [900, 2220, 150, 111],
        [750, 2220, 150, 111],
        [600, 2220, 150, 111]
      ]
    };

    // FONCTION ANIMATION TOUS SPRITES DAVE

    var timestampTemoin;
    var resetAnimation = true;
    var indexSprite = 0;

    function animation(timestamp, nomPersonnage, nomSprite, nomInterpolation, mouvementInterpolation, decalageX, decalageY, vitesse) {

      if (indexSprite > nomInterpolation[mouvementInterpolation].length - 1) {
        indexSprite = 0;
      } // verifie que l'on reparte bien a l'index 0 au changement de mouvement

      if (!timestampTemoin) {
        timestampTemoin = timestamp;
      } // definit un TS de base si absent

      if (timestamp - timestampTemoin > vitesse) {
        timestampTemoin = timestamp;
        if (indexSprite < nomInterpolation[mouvementInterpolation].length - 1) {
          indexSprite++;
        } else {
          if (!dave.vivant) {
            // arret de l'anim après une exécution
          } else {
            indexSprite = 0;
          }
        }

      } // fait defiler les sprites pour chaque anim

      // effet de clignotement en cas de degats. Alpha 1 image sur 2
      if (dave.degat && indexSprite % 2) { // genere une transparence sur 1 sprite sur 2 
        ctx.save();
        ctx.globalAlpha = 0;
      };

      ctx.drawImage(nomSprite.contenu, nomInterpolation[mouvementInterpolation][indexSprite][0], nomInterpolation[mouvementInterpolation][indexSprite][1], nomInterpolation[mouvementInterpolation][indexSprite][2], nomInterpolation[mouvementInterpolation][indexSprite][3], nomPersonnage.x - decalageX, nomPersonnage.y - decalageY, nomInterpolation[mouvementInterpolation][indexSprite][2], nomInterpolation[mouvementInterpolation][indexSprite][3]);
      // le decalage x et y sert a recentrer le sprite sur la hitbox de Dave

      // pour annuler l'alpha sur le contexte
      if (dave.degat && indexSprite % 2) {
        ctx.restore();
      };
    };

    // FONCTION ANIMATION DU HIT
    // dave.hit reste true pendant la duree de la "vitesse"
    var timestampHit;

    function animationHit(timestamp, vitesse) {

      if (!timestampHit) {
        timestampHit = timestamp;
      }

      if (timestamp - timestampHit > vitesse) {
        timestampHit = 0;
        dave.hit = false;
      }

    };

    // FONCTION INVULNERABILITE
    // Permet de donner des frames d'invulnérabilité à Dave après chaque dégat
    var timestampInvulnerabilite;

    function framesInvulnérabilite(timestamp, vitesse) {

      if (!timestampInvulnerabilite) {
        timestampInvulnerabilite = timestamp;
      }

      if (timestamp - timestampInvulnerabilite > vitesse) {
        timestampInvulnerabilite = 0;
        dave.degat = false;
      }

    };

    // DAVE LE DEV

    var dave = {

      hauteur: 52,
      largeur: 36,
      saut: true,
      hit: false,
      x: 195, // position x de départ feu de camp
      y: 336, // position Y de départ feu de camp
      y_velocite: 0,
      allonge: 40, // définit la portée des coups de Dave
      allongeInferieure: 32, // ajoute une hauteur superieur lors de la frappe pour frapper egalement en dessous de Dave
      sante: [1, 1, 1, 1], // nombre de coeurs
      degat: false, // pour déclencher des frames d'invulnérabilité
      vivant: true,
      directionRegard: 'droite',
      updateRegard: function (directionRegard) {
        this.directionRegard = directionRegard;
      } // directionRegard et son update check la derniere direction de dave pour être sur que les sprites restent dans une orientation logique par rapport au dernier mouvement du perso
    };

    // FONCTIONS DE DEPLACEMENTS GAUCHE ET DROITE

    // Dave va à droite
    var ensembleMouvementDaveDroite = function () {
      dave.x += 5; // deplacement x

      // bloquage de dave en milieu de canvas et
      // déplacement des éléments du background
      // déplacement de la caméra
      if (dave.x > (canvas.width / 2) - (dave.largeur / 2) && camera.x > -7708) {
        dave.x = (canvas.width / 2) - (dave.largeur / 2);
        camera.x -= 6;
        bgMontagnes.x -= 0.3; 
        bgNuageAvantMontagne.x -= 0.5; 
        bgNuageSeul.x -= 0.5; 
        bgSolArrierePlan.x -= 0.4; 
        bgNuagesSecondPlan.x -= 0.5; 
        bgForet.x -= 0.5; 
        bgNuagesPremierPlan.x -= 0.5; 

      };
    };
    // Dave va à gauche
    var ensembleMouvementDaveGauche = function () {
      dave.x -= 5; // deplacement x

      // bloquage de dave en milieu de canvas et
      // déplacement des éléments du background
      // déplacement de la caméra
      if (dave.x < (canvas.width / 2) - (dave.largeur / 2) && camera.x <= -1) {
        dave.x = (canvas.width / 2) - (dave.largeur / 2);
        camera.x += 6;
        bgMontagnes.x += 0.3; 
        bgNuageAvantMontagne.x += 0.5; 
        bgNuageSeul.x += 0.5; 
        bgSolArrierePlan.x += 0.4; 
        bgNuagesSecondPlan.x += 0.5; 
        bgForet.x += 0.5; 
        bgNuagesPremierPlan.x += 0.5; 

      };
    };

    ///////////////////////////////////////////////////////////////
    /////                         MOBS                        /////
    ///////////////////////////////////////////////////////////////

    // SPRITE SHEET SLIMES

    var spriteSlime = elementImage(1024, 600, 0, 0, 0);
    spriteSlime.contenu.src = "img/slime.png";

    // POSITIONS DES SPRITES

    var interpolationSlime = {
      // refs : 0, 128, 256, 384, 512, 640, 768, 896
      walkGauche: [
        [512, 0, 128, 100],
        [640, 0, 128, 100],
        [768, 0, 128, 100],
        [896, 0, 128, 100],
      ],
      walkDroite: [
        [384, 300, 128, 100],
        [256, 300, 128, 100],
        [128, 300, 128, 100],
        [0, 300, 128, 100],
      ],
      attackGauche: [ // a renseigner
        [0, 0, 128, 100],
        [128, 0, 128, 100],
        [256, 0, 128, 100],
        [384, 0, 128, 100],
        [512, 0, 128, 100],
      ],
      attackDroite: [ // a renseigner
        [0, 0, 128, 100],
        [128, 0, 128, 100],
        [256, 0, 128, 100],
        [384, 0, 128, 100],
        [512, 0, 128, 100],
      ],
      dieGauche: [
        [128, 200, 128, 100],
        [256, 200, 128, 100],
        [384, 200, 128, 100],
        [512, 200, 128, 100],
      ],
      dieDroite: [
        [640, 500, 128, 100],
        [512, 500, 128, 100],
        [384, 500, 128, 100],
        [256, 500, 128, 100],
      ]
    };

    // FONCTION ANIMATION TOUS SPRITES

    var timestampTemoinSlime;
    var timestampTemoinSlimeDeath;
    var indexSpriteSlime = 0;
    var indexSpriteSlimeDeath = 0;

    function animationSlime(timestamp, nomPersonnage, nomSprite, nomInterpolation, mouvementInterpolation, decalageX, decalageY, vitesse) {

      // idem fonction d'animation de Dave SAUF intégration du décalage de la caméra dans le drawImage pour décaler les mobs par rapport a la caméra

      // version avec un seul balayage du sprite pour la mort du slime
      if ((mouvementInterpolation === 'dieGauche' || mouvementInterpolation === 'dieDroite')) {

        if (!timestampTemoinSlimeDeath) {
          timestampTemoinSlimeDeath = timestamp;
        }

        if (timestamp - timestampTemoinSlimeDeath > vitesse) {
          timestampTemoinSlimeDeath = timestamp;
          if (indexSpriteSlimeDeath < nomInterpolation[mouvementInterpolation].length - 1) {
            indexSpriteSlimeDeath++;
          } else {
            indexSpriteSlimeDeath = 0;
            timestampTemoinSlimeDeath = 0;
            nomPersonnage.animDeath = false;
          }
        }

        if (nomPersonnage.animDeath) {
          ctx.drawImage(nomSprite.contenu, nomInterpolation[mouvementInterpolation][indexSpriteSlimeDeath][0], nomInterpolation[mouvementInterpolation][indexSpriteSlimeDeath][1], nomInterpolation[mouvementInterpolation][indexSpriteSlimeDeath][2], nomInterpolation[mouvementInterpolation][indexSpriteSlimeDeath][3], nomPersonnage.x + camera.x - decalageX, nomPersonnage.y - decalageY, nomInterpolation[mouvementInterpolation][indexSpriteSlimeDeath][2] * 0.9, nomInterpolation[mouvementInterpolation][indexSpriteSlimeDeath][3] * 0.9);
        }

        // version boucle pour les autres mouvements
      } else {

        if (indexSpriteSlime > interpolationSlime[mouvementInterpolation].length - 1) {
          indexSpriteSlime = 0;
        }

        if (!timestampTemoinSlime) {
          timestampTemoinSlime = timestamp;
        }

        if (timestamp - timestampTemoinSlime > vitesse) {
          timestampTemoinSlime = timestamp;
          if (indexSpriteSlime < nomInterpolation[mouvementInterpolation].length - 1) {
            indexSpriteSlime++;
          } else {
            indexSpriteSlime = 0;
          }
        }

        ctx.drawImage(nomSprite.contenu, nomInterpolation[mouvementInterpolation][indexSpriteSlime][0], nomInterpolation[mouvementInterpolation][indexSpriteSlime][1], nomInterpolation[mouvementInterpolation][indexSpriteSlime][2], nomInterpolation[mouvementInterpolation][indexSpriteSlime][3], nomPersonnage.x + camera.x - decalageX, nomPersonnage.y - decalageY, nomInterpolation[mouvementInterpolation][indexSpriteSlime][2] * 0.9, nomInterpolation[mouvementInterpolation][indexSpriteSlime][3] * 0.9);

      }

    };

    // Fonction usine pour la création des slimes
    var slime = (function () {

      var NouveauSlime = function (x, y, z) {
        this.hauteur = 48; // hitbox
        this.largeur = 82; // hitbox
        this.x = x; // position x
        this.y = y; // position y
        this.chemin = z; // distance parcourue par le mob durant sa routine
        this.check = 0; // var de verification du chemin parcouru
        this.evol = -1; // vitesse de marche du mob
        this.vivant = true; // mob vivant ou mort
        this.animDeath = true; // pour lancer l'animation de mort qu'une seule fois
      };

      // fonction de mise a jour de la position x du mob pour sa routine de déplacement
      // plus modification du sens du mob pour afficher le sprite correspondant
      NouveauSlime.prototype.updateX = function () {
        if (this.check >= 0) {
          this.evol = -1;
          this.directionRegard = 'gauche';
        }
        if (this.check <= this.chemin) {
          this.evol = 1;
          this.directionRegard = 'droite';
        }
        this.check = this.check + this.evol;
        this.x = this.x + this.evol;
      };

      return function (x, y, z) {
        return new NouveauSlime(x, y, z);
      };

    }());

    // Déclaration des slimes
    // new slime (position x de départ, position y de départ, distance parcouru par le mob sur sa "routine de déplacement")
    // valeur négative car son premier déplacement est un retour
    var slime1 = new slime(1300, 369, -640);
    var slime2 = new slime(1275, 81, -220);
    var slime3 = new slime(1590, 304, -310);
    var slime4 = new slime(2930, 113, -280);
    var slime5 = new slime(2920, 400, -350);
    var slime6 = new slime(4405, 274, -230);
    var slime7 = new slime(5190, 145, -210); 
    var slime8 = new slime(6180, 306, -480);
    var slime9 = new slime(8490, 337, -540);

    // COLLISIONS AVEC DAVE NO HIT
    var slimesSquad = [
      [slime1],
      [slime2],
      [slime3],
      [slime4],
      [slime5],
      [slime6],
      [slime7],
      [slime8],
      [slime9]
    ];

    var x_collision_slimes;
    var y_collision_slimes;
    var collision_slimes;

    // BALAYAGE DES SLIMES POUR CHECKER LA COLLISION AVEC DAVE => NO HIT
    var collisionsSlimes = function () {

      for (var i = 0; i < slimesSquad.length; i++) {

        x_collision_slimes = (dave.x < ((slimesSquad[i][0].x + camera.x) + slimesSquad[i][0].largeur) && ((dave.x + dave.largeur) > (slimesSquad[i][0].x) + camera.x));
        y_collision_slimes = (dave.y < (slimesSquad[i][0].y + slimesSquad[i][0].hauteur) && (dave.y + dave.hauteur > slimesSquad[i][0].y));

        collision_slimes = x_collision_slimes && y_collision_slimes;

        if (collision_slimes && slimesSquad[i][0].vivant) {
          switch (collision_slimes) {
            case true:
              if (dave.sante.length > 0 && dave.degat === false) {
                dave.degat = true;
                dave.sante.shift();
                if(dave.sante.length <= 0){
                  dave.vivant = false;
                }
              }
              break;
            case false:
              break;
          }
        }
      }
    };

    // BALAYAGE DES SLIMES POUR CHECKER LA COLLISION AVEC L'EPEE DE DAVE => HIT
    var collisionsSlimesEpeeDave = function () {

      if (dave.hit === true) {

        for (var i = 0; i < slimesSquad.length; i++) {

          if (dave.directionRegard === 'droite') {
            x_collision_slimes = ((dave.x + dave.largeur) < (slimesSquad[i][0].x + camera.x + slimesSquad[i][0].largeur) && (dave.x + dave.largeur + dave.allonge) > (slimesSquad[i][0].x + camera.x));
            y_collision_slimes = (dave.y < (slimesSquad[i][0].y + slimesSquad[i][0].hauteur) && (dave.y + dave.hauteur + dave.allongeInferieure> slimesSquad[i][0].y));
          } else {
            x_collision_slimes = ((dave.x - dave.allonge) < (slimesSquad[i][0].x + camera.x + slimesSquad[i][0].largeur) && (dave.x > (slimesSquad[i][0].x + camera.x)));
            y_collision_slimes = (dave.y < (slimesSquad[i][0].y + slimesSquad[i][0].hauteur) && (dave.y + dave.hauteur + dave.allongeInferieure> slimesSquad[i][0].y));
          }

          collision_slimes = x_collision_slimes && y_collision_slimes;

          if (collision_slimes && slimesSquad[i][0].vivant) {
            switch (collision_slimes) {
              case true:
                slimesSquad[i][0].vivant = false;
                break;
              case false:
                break;
            }
          }
        }
      }
    };

    ///////////////////////////////////////////////////////////////
    /////                    HUD ET POTIONS                   /////
    ///////////////////////////////////////////////////////////////

    // SPRITE SHEET HUD

    var hud = elementImage(60, 240, 0, 0, 0);
    hud.contenu.src = "img/hud.png";
    // hud, tiles de 11 * 16

    // DRAW DES POTIONS DE LA MAP, DU HUD ET DES ARBRES

    function drawElementFixe(sprite, sx, sy, sw, sh, x, y, w, h) {
      ctx.drawImage(sprite, sx, sy, sw, sh, x + camera.x, y, w, h);
    }

    // SANTE
    var nbreDeCoeurs; // variables appelees dans le requestAnimationFrame pour récupérer l'etat de santé de Dave et afficher le nbre de coeurs correspondants

    // POSITIONS DES SPRITES
    // INDEX[9] utilisé dans le check des collisions Dave vs Potions & coffre
    var potions = [
      [0, 0, 16, 16, 1177, 35, 50, 50, 1, "potionRougeRecup"],
      [32, 16, 16, 16, 2680, 350, 50, 50, 2, "potionBleueRecup"],
      [48, 32, 16, 16, 3527, 170, 50, 50, 3, "potionVerteRecup"],
      [0, 48, 16, 16, 5141, 335, 50, 50, 4, "potionJauneRecup"],
      [16, 64, 16, 16, 7205, 60, 50, 50, 5, "potionVioletteRecup"],
      [0, 0, 0, 0, 8255 + 16, 308 + 33, 272  - 16, 195, 6, "coffreRecup"], // ajout de la position du coffre pour ne pas avoir une detection de collisions juste pour le coffre
      [0, 0, 0, 0, 8280, 150, 60, 72, 7, "cvRecup"] // ajout de la position du CV pour ne pas avoir une detection de collisions juste pour le coffre
    ];

    // CHECK IF POTIONS RECUPEREES

    var potionsRecuperees = {
      potionRougeRecup: false,
      potionBleueRecup: false,
      potionVerteRecup: false,
      potionJauneRecup: false,
      potionVioletteRecup: false,
    };

    // FONCTION DE DESSIN DES POTIONS DU HUD
    var drawPotionsHudEtMap = function (couleurPotionRecup, indexPotions, xPremierePotion, decalagePotion, multiplicateurDecalage, y, w, h, texte, couleurTexte, texteX, texteY){

      if (!potionsRecuperees[couleurPotionRecup]) {

          drawElementFixe(hud.contenu, potions[indexPotions][0], potions[indexPotions][1], potions[indexPotions][2], potions[indexPotions][3], potions[indexPotions][4], potions[indexPotions][5] + posPotion, potions[indexPotions][6], potions[indexPotions][7]);

          ctx.save();
          ctx.globalAlpha = 0.25;

        };
  
      ctx.drawImage(hud.contenu, potions[indexPotions][0], potions[indexPotions][1], potions[indexPotions][2], potions[indexPotions][3], xPremierePotion + (decalagePotion * multiplicateurDecalage), y, w, h);
  
      ctx.fillStyle = "rgb(0, 0, 0)";
      ctx.fillText(texte, texteX + 1, texteY + 1);
      ctx.fillStyle = couleurTexte;
      ctx.fillText(texte, texteX, texteY);
      ctx.restore();
  
    }

    // CHECK COLLISIONS DAVE VS POTIONS

    var x_collision_potions;
    var y_collision_potions;
    var collision_potions;

    var collisionsPotions = function () {

      for (var i = 0; i < potions.length; i++) {

        x_collision_potions = (dave.x < ((potions[i][4]) + camera.x) + potions[i][6]) && ((dave.x + dave.largeur) > (potions[i][4]) + camera.x);
        y_collision_potions = (dave.y < (potions[i][5] + potions[i][7])) && (dave.y + dave.hauteur > potions[i][5]);
        collision_potions = x_collision_potions && y_collision_potions;

        if (collision_potions) {
          switch (potions[i][8]) {
            case 1:
              potionsRecuperees.potionRougeRecup = true;
              break;
            case 2:
              potionsRecuperees.potionBleueRecup = true;
              break;
            case 3:
              potionsRecuperees.potionVerteRecup = true;
              break;
            case 4:
              potionsRecuperees.potionJauneRecup = true;
              break;
            case 5:
              potionsRecuperees.potionVioletteRecup = true;
              break;
            case 6: // Si toutes les potions ont été récupérées, debloque le coffre
              if (potionsRecuperees.potionRougeRecup && potionsRecuperees.potionBleueRecup && potionsRecuperees.potionVerteRecup && potionsRecuperees.potionJauneRecup && potionsRecuperees.potionVioletteRecup){
              objetCoffre.unlock = true;
              }
              break;
            case 7:
            if (objetCv.unlock){
              $('#cv').click(); // click via JQuery sur l'onglet CV lorsque le perso passe dessus
            }
          }
        }
      }

    };

    // EFFET FLOTTEMENT DES POTIONS
    var posPotion = 0.2; // varuables appelées dans le requestAnimationFrame pour faire varier le Y des potions
    var evolution = 0.2; // varuables appelées dans le requestAnimationFrame pour faire varier le Y des potions

    ///////////////////////////////////////////////////////////////
    /////                       GAME OVER                      /////
    ///////////////////////////////////////////////////////////////

    var youDiedScreen = elementImage(900, 480, 0, 0, 0);
    youDiedScreen.contenu.src = "img/you_died.png";

    var timestampDeath;
    var opaciteEcranNoir = 0; // Les différents éléments apparaissent à des vitesses différentes
    var opaciteMessge = 0; // Les différents éléments apparaissent à des vitesses différentes
    var zoomMessage = 0; // Les différents éléments apparaissent à des vitesses différentes

    function animationDeath(timestamp, vitesse) {

      if (!timestampDeath) {
        timestampDeath = timestamp;
      }

      if (timestamp - timestampDeath > vitesse) {
        timestampDeath = 0;
        if (opaciteEcranNoir < 0.8) {
          opaciteEcranNoir += 0.05;
        }
        if (opaciteMessge < 1) {
          opaciteMessge += 0.2;
        }
        if (zoomMessage < 50) {
          zoomMessage += 4;
        }
      }

      ctx.fillStyle = 'rgba(0, 0, 0,' + opaciteEcranNoir + ')'; // ecran noir
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.save();
      ctx.globalAlpha = opaciteMessge;
      ctx.drawImage(youDiedScreen.contenu, 0 - zoomMessage / 2, 0 - zoomMessage / 2, 900 + zoomMessage, 480 + zoomMessage);
      ctx.fillStyle = "rgb(255, 255, 255)";
      ctx.font = "20px VT323"
      ctx.fillText("Appuyez sur ESPACE pour continuer.", 320, 464);
      ctx.restore();
    };


    ///////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////
    /////                   BOUCLE ANIMATION                  /////
    ///////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////

    var boucle = function (timestamp) {

      // clear du canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      ///////////////////////////////////////////////////////////////
      /////                  BACKGROUND PARALLAX                /////
      ///////////////////////////////////////////////////////////////

      (function drawBg() {

        ctx.fillStyle = 'rgb(132, 180, 225)'; // ciel fixe
        ctx.fillRect(0, 0, canvas.width, canvas.height); // ciel fixe

        ctx.drawImage(bgNuagesFond.contenu, bgNuagesFond.x, -60);
        ctx.drawImage(bgNuagesFond.contenu, (bgNuagesFond.x + canvas.width) - 1, -60);
        bgNuagesFond.x -= 0.2;
        if (bgNuagesFond.x < -canvas.width) {
          bgNuagesFond.x = 0;
        }
        ctx.drawImage(bgMontagnes.contenu, bgMontagnes.x, -20);
        ctx.drawImage(bgMontagnes.contenu, (bgMontagnes.x + canvas.width) - 1, -20);
        ctx.drawImage(bgNuageSeul.contenu, bgNuageSeul.x, 90); // appelle une fois car pas besoin d'un double visuel (nuage seul)
        bgNuageSeul.x -= 0.6;
        if (bgNuageSeul.x < -1800) { // attendre qu'il soit suffisamment loin pour le rappeler
          bgNuageSeul.x = canvas.width; // decalage au rappel car le nuage est au milieu du sprite
        }
        ctx.drawImage(bgNuageAvantMontagne.contenu, bgNuageAvantMontagne.x, -40);
        ctx.drawImage(bgNuageAvantMontagne.contenu, (bgNuageAvantMontagne.x + canvas.width) - 1, -40);
        bgNuageAvantMontagne.x -= 0.1;
        if (bgNuageAvantMontagne.x < -canvas.width) {
          bgNuageAvantMontagne.x = 0;
        }
        ctx.drawImage(bgSolArrierePlan.contenu, bgSolArrierePlan.x, -20);
        if (bgSolArrierePlan.x < -1800) { // attendre qu'il soit suffisamment loin pour le rappeler
          bgSolArrierePlan.x = canvas.width;
        }
        ctx.drawImage(bgNuagesSecondPlan.contenu, bgNuagesSecondPlan.x, -20);
        ctx.drawImage(bgNuagesSecondPlan.contenu, (bgNuagesSecondPlan.x + canvas.width) - 1, -20);
        bgNuagesSecondPlan.x -= 0.2;
        if (bgNuagesSecondPlan.x < -canvas.width) {
          bgNuagesSecondPlan.x = 0;
        }
        ctx.drawImage(bgForet.contenu, bgForet.x, 130);
        ctx.drawImage(bgForet.contenu, (bgForet.x + canvas.width) - 1, 130);
        ctx.drawImage(bgNuagesPremierPlan.contenu, bgNuagesPremierPlan.x, -20);
        ctx.drawImage(bgNuagesPremierPlan.contenu, (bgNuagesPremierPlan.x + canvas.width) - 1, -20);
        bgNuagesPremierPlan.x -= 0.4;
        if (bgNuagesPremierPlan.x < -canvas.width) {
          bgNuagesPremierPlan.x = 0;
        }
      }());

      ///////////////////////////////////////////////////////////////
      /////                     DECOR & OBJETS                  /////
      ///////////////////////////////////////////////////////////////

      // TILE MAPS
      drawMap(terrainArrierePlan);
      drawMap(terrainPonts);
      drawMap(terrainPremierPlan);

      // ARBRES
      (function () { // ENGLOBE FONCTION A SUPPRIMER //
        drawElementFixe(arbres.contenu, 450, 0, 150, 256, -35, -192, 150, 256);
        drawElementFixe(arbres.contenu, 300, 0, 150, 256, 1090, 160, 150, 256);
        drawElementFixe(arbres.contenu, 600, 0, 150, 256, 1025, -128, 150, 256);
        drawElementFixe(arbres.contenu, 150, 0, 150, 256, 1550, 96, 150, 256);

        drawElementFixe(arbres.contenu, 300, 0, 150, 256, 2624, -96, 150, 256);
        drawElementFixe(arbres.contenu, 0, 0, 150, 256, 2540, -128, 150, 256);
        drawElementFixe(arbres.contenu, 450, 0, 150, 256, 1916, 96, 150, 256);
        drawElementFixe(arbres.contenu, 450, 0, 150, 256, 3700, 192, 150, 256);
        drawElementFixe(arbres.contenu, 150, 0, 150, 256, 3944, -96, 150, 256);
        drawElementFixe(arbres.contenu, 0, 0, 150, 256, 4562, 128, 150, 256);
        drawElementFixe(arbres.contenu, 300, 0, 150, 256, 4956, -64, 150, 256);
        drawElementFixe(arbres.contenu, 0, 0, 150, 256, 5738, 96, 150, 256);
        drawElementFixe(arbres.contenu, 600, 0, 150, 256, 6150, 96, 150, 256);
        drawElementFixe(arbres.contenu, 450, 0, 150, 256, 6090, 96, 150, 256);
        drawElementFixe(arbres.contenu, 150, 0, 150, 256, 6880, 0, 150, 256);

        // clairiere
        drawElementFixe(arbres.contenu, 0, 0, 150, 256, 7980, 128, 150, 256);
        drawElementFixe(arbres.contenu, 300, 0, 150, 256, 7920, 128, 150, 256);
        drawElementFixe(arbres.contenu, 150, 0, 150, 256, 8045, 128, 150, 256);
        drawElementFixe(arbres.contenu, 0, 0, 150, 256, 8510, 128, 150, 256);
        drawElementFixe(arbres.contenu, 600, 0, 150, 256, 8420, 128, 150, 256);
        drawElementFixe(arbres.contenu, 450, 0, 150, 256, 8480, 128, 150, 256);

        drawMap(terrainHerbe);

        drawElementFixe(arbres.contenu, 0, 0, 150, 256, 585, 160, 150, 256);
        drawElementFixe(arbres.contenu, 600, 0, 150, 256, 3236, -96, 150, 256);
      }());

      // FEU DE CAMP
      animationFeu(timestamp, objetFeu, feu, interpolationsFeu, 'static', 0, 0, 100, 0.8);

      // COFFRE DE FIN
      if (!objetCoffre.unlock){
        animationCoffre(timestamp, objetCoffre, coffre, interpolationsCoffre, 'static', 0, 0, 100, 0.4);
      } else {
        animationCoffre(timestamp, objetCoffre, coffre, interpolationsCoffre, 'opening', 0, 0, 100, 0.4);
      }

      if (objetCv.unlock){
      drawElementFixe(holyCv.contenu, 0, 0, 60, 72, objetCv.x, objetCv.y + posPotion, objetCv.w, objetCv.h);
      }

      ///////////////////////////////////////////////////////////////
      /////                         SECRET                      /////
      ///////////////////////////////////////////////////////////////

      // AFFICHAGE DE LA COLLISION MAP, DES HITBOXES DE DAVE ET DES SLIMES
      // SI LE CODE SECRET EST OK

      if (controls.m4p && controls.c0D353Cr374C71F) {

        // CHECK MAP COLLISION
        drawMapCollision(terrainCollision);

        // CHECK HITBOX DAVE
        ctx.fillStyle = 'rgba(255, 0, 0, 1)';
        ctx.beginPath();
        ctx.rect(dave.x, dave.y, dave.largeur, dave.hauteur);
        ctx.fill();

        // CHECK FRAPPE DAVE
        if (dave.hit === true) {
          if (dave.directionRegard === 'droite') {
            ctx.fillStyle = 'rgb( 0, 0, 255)'; // ciel fixe
            ctx.fillRect(dave.x + dave.largeur, dave.y, dave.allonge, dave.hauteur + dave.allongeInferieure);
          } else {
            ctx.fillStyle = 'rgb( 0, 0, 255)'; // ciel fixe
            ctx.fillRect(dave.x - dave.allonge, dave.y, dave.allonge, dave.hauteur + dave.allongeInferieure);
          }
        }

        // CHECK OBJET SLIME

        for (var i = 0; i < slimesSquad.length; i++) { // Pour chaque slime
          ctx.fillStyle = 'rgba(255, 0, 255, 0.5)';
          ctx.beginPath();
          ctx.rect(slimesSquad[i][0].x + camera.x, slimesSquad[i][0].y, slimesSquad[i][0].largeur, slimesSquad[i][0].hauteur);
          ctx.fill();
        }

      }

      ///////////////////////////////////////////////////////////////
      /////                         MOBS                        /////
      ///////////////////////////////////////////////////////////////

      // Animation des slimes
      for (var i = 0; i < slimesSquad.length; i++) { // Pour chaque slime
        if (slimesSquad[i][0].vivant) { // verifie si le slime est vivant
          if (slimesSquad[i][0].directionRegard === "gauche") { // verifie dans quelle direction il est tourné
            animationSlime(timestamp, slimesSquad[i][0], spriteSlime, interpolationSlime, 'walkGauche', 14, 42, 100); // animation gauche
          } else {
            animationSlime(timestamp, slimesSquad[i][0], spriteSlime, interpolationSlime, 'walkDroite', 19, 42, 100); // animation droite
          };
          slimesSquad[i][0].updateX(); // incremente le x du slime pour lui faire suiver sa routine
        } else {
          if (slimesSquad[i][0].animDeath === true) { // si le slime est mort
            if (slimesSquad[i][0].directionRegard === "gauche") { // verifie dans quelle direction il est tourné
              animationSlime(timestamp, slimesSquad[i][0], spriteSlime, interpolationSlime, 'dieGauche', 12, 42, 150); // animation mort gauche
            } else {
              animationSlime(timestamp, slimesSquad[i][0], spriteSlime, interpolationSlime, 'dieDroite', 18, 42, 150); // animation mort droite
            }
          }
        };
      };

      ///////////////////////////////////////////////////////////////
      /////                    HUD ET POTIONS                   /////
      ///////////////////////////////////////////////////////////////

      // COEURS
      nbreDeCoeurs = dave.sante.length * 16;
      ctx.drawImage(hud.contenu, 0, 160 + nbreDeCoeurs, 64, 16, 5, 9, 128, 32);

      // EFFET FLOTTEMENT DES POTIONS
      if (posPotion >= 20) {
        evolution = -0.3;
      }
      if (posPotion <= 0) {
        evolution = 0.3;
      }
      posPotion = posPotion + evolution;

      // DESSIN DES POTIONS (HUD ET POTIONS A RECUPERER)
   
      var xPremierePotion = 670; // Position 1ere potion du HUD
      var decalagePotion = 9 + 40; // Toutes les positions se calent sur la premiere via cette variable

      drawPotionsHudEtMap("potionRougeRecup", 0, xPremierePotion, decalagePotion, 0, 9, 32, 32, "html", "rgb(228, 59, 68)", 675, 55);
      drawPotionsHudEtMap("potionBleueRecup", 1, xPremierePotion, decalagePotion, 1, 9, 32, 32, "css", "rgb(25, 143, 212)", 726, 55);
      drawPotionsHudEtMap("potionVerteRecup", 2, xPremierePotion, decalagePotion, 2, 9, 32, 32, "js", "rgb(24, 99, 34)", 778, 55);
      drawPotionsHudEtMap("potionJauneRecup", 3, xPremierePotion, decalagePotion, 3, 9, 32, 32, "jquery", "rgb(254, 231, 97)", 816, 55);
      drawPotionsHudEtMap("potionVioletteRecup", 4, xPremierePotion - 10, decalagePotion, 4, 9, 32, 32, "node", "rgb(181, 80, 136)", 861, 55);

      ///////////////////////////////////////////////////////////////
      /////                   REPONSES KEYDOWN                  /////
      ///////////////////////////////////////////////////////////////
      if (dave.vivant) {
      // VERIFIE LA COMBINAISON DE TOUCHES ACTIVE
      controls.checkDirection();

      // CHECK DAVE VIVANT
      // if (dave.vivant) {

        /////// HAUT DROITE
        if (controls.direction === 'hautDroite') {
          dave.largeur = 36; // definit la hitbox pour ce mouvement
          dave.hauteur = 52; // definit la hitbox pour ce mouvement
          // si haut est appuyé et dave ne saute pas déjà
          if (dave.saut === false) { // saut
            dave.y_velocite = -30;
            dave.saut = true;
          }

          ensembleMouvementDaveDroite();

          // verfie si Dave saute pour ne pas casser son animation
          if (dave.hit === true) {
            animation(timestamp, dave, spriteDave, interpolationDave, 'hitDroite', 62, 36, 95);
          } else {
            animation(timestamp, dave, spriteDave, interpolationDave, 'jumpDroite', 62, 36, 85);
          }
        }

        /////// HAUT GAUCHE
        if (controls.direction === 'hautGauche') {
          dave.largeur = 36; // definit la hitbox pour ce mouvement
          dave.hauteur = 52; // definit la hitbox pour ce mouvement
          // si haut est appuyé et dave ne saute pas déjà
          if (dave.saut === false) {
            dave.y_velocite -= 30;
            dave.saut = true;
          };

          ensembleMouvementDaveGauche();

          // verfie si Dave saute pour ne pas casser son animation        
          if (dave.hit === true) {
            animation(timestamp, dave, spriteDave, interpolationDave, 'hitGauche', 52, 36, 95);
          } else {
            animation(timestamp, dave, spriteDave, interpolationDave, 'jumpGauche', 52, 36, 85);
            dave.updateRegard('gauche');
          }
        }

        /////// HAUT
        if (controls.direction === 'haut') {
          dave.largeur = 36; // definit la hitbox pour ce mouvement
          dave.hauteur = 52; // definit la hitbox pour ce mouvement
          // si haut est appuyé et dave ne saute pas déjà
          if (dave.saut === false) {
            dave.y_velocite -= 30;
            dave.saut = true;
          }

          // verifie dans quel sens Dave est tourné pour appliquer le bon sens d'animation
          if (dave.directionRegard === 'droite') {
            if (dave.hit === true) { // verfie si Dave est en train de frapper pour ne pas casser son animation de frappe
              animation(timestamp, dave, spriteDave, interpolationDave, 'hitDroite', 62, 36, 95);
            } else {
              animation(timestamp, dave, spriteDave, interpolationDave, 'jumpDroite', 62, 36, 85);
            }
          } else {
            if (dave.hit === true) { // verfie si Dave saute pour ne pas casser son animation de saut
              animation(timestamp, dave, spriteDave, interpolationDave, 'hitGauche', 52, 36, 95);
            } else {
              animation(timestamp, dave, spriteDave, interpolationDave, 'jumpGauche', 52, 36, 85);
            }
          }
        }

        /////// BAS
        if (controls.direction === 'bas') {
          dave.largeur = 36; // definit la hitbox pour ce mouvement
          dave.hauteur = 52; // definit la hitbox pour ce mouvement

          // verifie dans quel sens Dave est tourné pour appliquer le bon sens d'animation
          if (dave.directionRegard === 'droite') {
            if (dave.hit === true) { // verfie si Dave est en train de frapper pour ne pas casser son animation de frappe
              dave.largeur = 42; // definit la hitbox pour ce mouvement
              dave.hauteur = 81
              animation(timestamp, dave, spriteDave, interpolationDave, 'hitDroite', 62, 27, 95);
            } else {
              animation(timestamp, dave, spriteDave, interpolationDave, 'crouchDroite', 60, 56, 180);
            }
          } else {
            if (dave.hit === true) {
               // verfie si Dave saute pour ne pas casser son animation de saut
               dave.largeur = 42; // definit la hitbox pour ce mouvement
               dave.hauteur = 81
              animation(timestamp, dave, spriteDave, interpolationDave, 'hitGauche', 52, 27, 95);
            } else {
              animation(timestamp, dave, spriteDave, interpolationDave, 'crouchGauche', 54, 56, 180);
            }
          }
        };

        /////// GAUCHE
        if (controls.direction === 'gauche') {
          dave.largeur = 42; // definit la hitbox pour ce mouvement
          dave.hauteur = 81; // definit la hitbox pour ce mouvement

          ensembleMouvementDaveGauche();

          // verifie dans quel sens Dave est tourné pour appliquer le bon sens d'animation
          if (dave.hit === true) { // verfie si Dave est en train de frapper pour ne pas casser son animation de frappe
            animation(timestamp, dave, spriteDave, interpolationDave, 'hitGauche', 44, 27, 95);
          } else {
            if (dave.saut === true) { // verfie si Dave saute pour ne pas casser son animation
              dave.largeur = 36;
              dave.hauteur = 52;
              animation(timestamp, dave, spriteDave, interpolationDave, 'jumpGauche', 52, 36, 85);
            } else {
              animation(timestamp, dave, spriteDave, interpolationDave, 'runGauche', 44, 27, 90);
            }
            dave.updateRegard('gauche');
          }
        }

        /////// DROITE
        if (controls.direction === 'droite') {
          dave.largeur = 42; // definit la hitbox pour ce mouvement
          dave.hauteur = 81; // definit la hitbox pour ce mouvement

          ensembleMouvementDaveDroite();

          // verifie dans quel sens Dave est tourné pour appliquer le bon sens d'animation
          if (dave.hit === true) { // verfie si Dave est en train de frapper pour ne pas casser son animation de frappe
            animation(timestamp, dave, spriteDave, interpolationDave, 'hitDroite', 64, 27, 95);
          } else {
            if (dave.saut === true) { // verfie si Dave saute pour ne pas casser son animation
              dave.largeur = 36;
              dave.hauteur = 52;
              animation(timestamp, dave, spriteDave, interpolationDave, 'jumpDroite', 62, 36, 85);
            } else {
              animation(timestamp, dave, spriteDave, interpolationDave, 'runDroite', 64, 27, 90);
            }
            dave.updateRegard('droite');
          }
        }

        /////// IDLE
        if (controls.direction === 'idle') {
          dave.largeur = 45; // definit la hitbox pour ce mouvement
          dave.hauteur = 81; // definit la hitbox pour ce mouvement

          if (dave.directionRegard === 'droite') { // verifie dans quel sens Dave est tourné pour appliquer le bon sens d'animation
            if (dave.hit === true) { // verfie si Dave est en train de frapper pour ne pas casser son animation de frappe
              animation(timestamp, dave, spriteDave, interpolationDave, 'hitDroite', 51, 27, 95);
            } else {
              if (dave.saut === true) { // verfie si Dave saute pour ne pas casser son animation
                dave.largeur = 36;
                dave.hauteur = 52;
                animation(timestamp, dave, spriteDave, interpolationDave, 'jumpDroite', 62, 36, 85);
              } else {
                animation(timestamp, dave, spriteDave, interpolationDave, 'idleDroite', 51, 27, 180);
              }
            }
          } else {
            if (dave.hit === true) { // verfie si Dave est en train de frapper pour ne pas casser son animation de frappe
              animation(timestamp, dave, spriteDave, interpolationDave, 'hitGauche', 54, 27, 95);
            } else {
              if (dave.saut === true) { // verfie si Dave saute pour ne pas casser son animation
                dave.largeur = 36;
                dave.hauteur = 52;
                animation(timestamp, dave, spriteDave, interpolationDave, 'jumpGauche', 52, 36, 85);
              } else {
                animation(timestamp, dave, spriteDave, interpolationDave, 'idleGauche', 54, 27, 180);
              }
            }
          }
        }

        /////// HIT

        // CHECK SI DAVE EST EN COURS DE FRAPPE
        if (controls.hit && dave.hit === false) {
          dave.hit = true;
        };
        // IF HIT, PASSE LE HIT A FALSE AU BOUT DE X MILLISECONDES
        if (dave.hit === true) {

          animationHit(timestamp, 475);
        };

      }

      ///////////////////////////////////////////////////////////////
      /////                      COLLISIONS                     /////
      ///////////////////////////////////////////////////////////////

      // 1s D'INVULNERABILITE SI TOUCHÉ
      if (dave.degat === true) {
        framesInvulnérabilite(timestamp, 1000);
      };

      // COLLISIIONS AVEC LE DECOR
      checkCollisions(terrainCollision);
      // CHECK IF POTION RECUPEREE
      collisionsPotions();
      // collisions avec les slimes
      collisionsSlimes(timestamp);
      // collisions avec les slimes
      collisionsSlimesEpeeDave();

      ///////////////////////////////////////////////////////////////
      /////                       GAME OVER                     /////
      ///////////////////////////////////////////////////////////////

      // Si dave tombe //
      if (dave.y > canvas.height + dave.hauteur + 10) {
        dave.vivant = false;
      };

      // SI DAVE EST MORT
      if (!dave.vivant) {
        dave.degat = false; // fin des dégats
        dave.sante = [];
        animationDeath(timestamp, 100); // affichage du screen de Death
        if (resetAnimation){
          indexSprite = 0;
          resetAnimation = false;
        }
        if (dave.directionRegard === 'droite') { // animation du sprite en fonction de la direction visée par Dave
          animation(timestamp, dave, spriteDave, interpolationDave, 'dieDroite', 62, 25, 400);
        } else {
          animation(timestamp, dave, spriteDave, interpolationDave, 'dieGauche', 62, 25, 400);
        }

        // RESET DU JEU
        if (controls.revive) {
          dave.x = 195; // reset de toutes les positions
          dave.y = 336; // reset de toutes les positions
          camera.x = 0; // reset de toutes les positions
          indexSprite = 0; // reset des sprites d'animation
          opaciteEcranNoir = 0; // reset du message de Game Over
          opaciteMessge = 0; // reset du message de Game Over
          zoomMessage = 0; // reset du message de Game Over
          bgMontagnes.x = 0; // reset des elements de decors pas en boucle
          bgSolArrierePlan.x = 0; // reset des elements de decors pas en boucle
          bgForet.x = 0; // reset des elements de decors pas en boucle
          for (var i = 0; i < slimesSquad.length; i++) { // repop des mobs
            slimesSquad[i][0].vivant = true; // ressucite les slimes
            slimesSquad[i][0].animDeath = true; // reset leur trigger de death animation
          };
          resetAnimation = true;
          dave.degat = false;
          // dave.sante = [1, 1, 1, 1]; // Santé 100%
          dave.sante.push(1, 1, 1, 1); // Santé 100%
          dave.vivant = true; // Dave est en vie!
        }
      };
      
      ///////////////////////////////////////////////////////////////
      /////                        GRAVITE                      /////
      ///////////////////////////////////////////////////////////////

      dave.y_velocite += 1.2;
      dave.y += dave.y_velocite;
      dave.y_velocite *= 0.9;

      // RECURSION DE LA BOUCLE D'ANIMATION
      window.requestAnimationFrame(boucle);

    };

    // INITIALISATION DES EVENT LISTENERS
    window.addEventListener('keydown', controls.keyUpOrDown);
    window.addEventListener('keyup', controls.keyUpOrDown);

    // INITIALISATION DE LA BOUCLE D'ANIMATION
    boucle();

  });

}());